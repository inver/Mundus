import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext.kotlinVersion = '1.8.21'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.9.11'
    }
}

allprojects {
    apply from: "$rootDir/gradle/dependencies.gradle"

    apply plugin: "jacoco"
    apply plugin: 'info.solidsoft.pitest'
    apply plugin: 'checkstyle'
    apply plugin: "java"

    ext {
        appName = "Abyssus"
        appVersion = "0.3.0"

        visuiVersion = '1.5.1'
        kryoVersion = '5.2.0'
        gltfVersion = 'master-SNAPSHOT'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        compileOnly libs.lombok
        annotationProcessor libs.lombok
        testCompileOnly libs.lombok
        testAnnotationProcessor libs.lombok

        implementation libs.commons_io
        implementation libs.commons_lang3
        implementation libs.commons_collections4
        implementation libs.slf4j_api
        implementation libs.jackson_databind
        implementation libs.jackson_annotations
    }

    tasks.withType(Checkstyle).configureEach {
        reports {
            xml.required = false
            html.required = true
            html.stylesheet resources.text.fromFile('../config/xsl/checkstyle-custom.xsl')
        }
    }

    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        options.encoding = "UTF-8"
    }

    tasks.withType(KotlinCompile).configureEach {
        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_11)
        }
    }

    tasks.withType(JacocoReport).configureEach {
        reports {
            xml.required = false
            csv.required = false
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }

    tasks.withType(Test).configureEach {
        testLogging {
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
            showStandardStreams true
            events = ["passed", "skipped", "failed"]
        }
        finalizedBy(jacocoTestReport)
    }
}

